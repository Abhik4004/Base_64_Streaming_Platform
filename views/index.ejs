<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Video Recording</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="container">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Base64 Streaming</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
          <div class="navbar-nav">
            <a class="nav-item nav-link active" href="./index.ejs">Record</a>
            <a class="nav-item nav-link" href="./stream.ejs">Stream</a>
          </div>
        </div>
      </nav>

    <div class="container mt-5">
        <div class="row">
            <div class="col">
                <video id="videoPlayer" class="w-100" controls autoplay></video>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <button id="startRecording" class="btn btn-primary">Start Recording</button>
                <button id="stopRecording" class="btn btn-danger">Stop Recording</button>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <label for="fileName" class="form-label">File Name:</label>
                <input type="text" id="fileName" class="form-control" name="fileName" placeholder="Enter file name">
            </div>
        </div>
    </div>
    
    <script>
        let mediaRecorder;
        let recordedChunks = [];
        let mediaStream;
        const videoPlayer = document.getElementById('videoPlayer');
        const startRecordingBtn = document.getElementById('startRecording');
        const stopRecordingBtn = document.getElementById('stopRecording');
        const fileNameInput = document.getElementById('fileName');

        startRecordingBtn.addEventListener('click', startRecording);
        stopRecordingBtn.addEventListener('click', stopRecording);

        async function startRecording() {
            try {
                mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                videoPlayer.srcObject = mediaStream;
                mediaRecorder = new MediaRecorder(mediaStream);

                mediaRecorder.ondataavailable = function(event) {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                };

                mediaRecorder.onstop = function() {
                    const blob = new Blob(recordedChunks, { type: 'video/webm' });
                    const reader = new FileReader();
                    reader.readAsDataURL(blob);
                    reader.onloadend = function() {
                        const base64data = reader.result;
                        saveBase64ToFile(base64data, fileNameInput.value);
                    };
                };

                mediaRecorder.start();
            } catch (error) {
                console.error('Error starting recording:', error);
            }
        }

        function stopRecording() {
            if (mediaRecorder) {
                mediaRecorder.stop();
            }
            if (mediaStream) {
                mediaStream.getTracks().forEach(track => track.stop());
            }
        }

        function saveBase64ToFile(base64data, fileName) {
            const byteCharacters = atob(base64data.split(',')[1]);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            const blob = new Blob([byteArray], { type: 'text/plain' });

            const a = document.createElement('a');
            a.href = URL.createObjectURL(blob);
            a.download = fileName || 'recorded_video.txt';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

    </script>
</body>
</html>
